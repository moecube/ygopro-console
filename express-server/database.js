// Generated by CoffeeScript 2.1.0
var Config, Pool, defineStandardQueryFunctions, moment, standardPromiseCallback, standardQueryCallback;

({Pool} = require('pg'));

Config = require('./config.json');

moment = require('moment');

module.exports.mycardPool = new Pool(Config.mycardDatabase);

module.exports.ygoproPool = new Pool(Config.ygoproDatabase);

standardQueryCallback = function(err, result, callback) {
  if (err) {
    console.log(err);
    return callback.call(this, null);
  } else {
    return callback.call(this, result.rows);
  }
};

standardPromiseCallback = function(resolve, reject, err, result) {
  if (err) {
    console.log(err);
    return reject(err);
  } else {
    return resolve(result.rows);
  }
};

defineStandardQueryFunctions = function(name, pool, standard_sql, count_sql, page_limit) {
  var formatArgs, result;
  result = {};
  formatArgs = (arg) => {
    if (Number.isInteger(arg)) {
      return arg;
    } else if (moment.isMoment(arg)) {
      return arg.format('YYYY-MM-DD HH:mm:ss');
    } else {
      return `%${arg}%`;
    }
  };
  result[name] = (args) => {
    args = args.map(formatArgs);
    args[args.length - 1] = (args[args.length - 1] - 1) * page_limit;
    return new Promise((resolve, reject) => {
      return pool.query(standard_sql, args, (err, result) => {
        return standardPromiseCallback(resolve, reject, err, result);
      });
    });
  };
  result[name + 'Count'] = function(args) {
    args = args.map(formatArgs);
    return new Promise((resolve, reject) => {
      return pool.query(count_sql, args, (err, result) => {
        if (err) {
          return resolve(0);
        } else {
          return resolve(Math.ceil(result.rows[0].count / page_limit));
        }
      });
    });
  };
  return result;
};

module.exports.standardQueryCallback = standardQueryCallback;

module.exports.standardPromiseCallback = standardPromiseCallback;

module.exports.defineStandatdQueryFunctions = defineStandardQueryFunctions;

//# sourceMappingURL=database.js.map
