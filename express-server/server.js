// Generated by CoffeeScript 2.1.0
var _url, analytics, authorizeRouter, bodyParser, config, express, packager, path, request, server, textParser, timeRouter, update, user;

express = require('express');

path = require('path');

_url = require('url');

request = require('request');

bodyParser = require('body-parser');

user = require('./user');

analytics = require('./analytics');

update = require('./update');

packager = require('./packager');

config = require('./config.json');

timeRouter = require('./time').timeRouter;

authorizeRouter = require('./author').authorizeRouter;

server = express();

// React Static File
server.use(express.static('react-pages/build'));

server.use(function(req, res, next) {
  res.header("Access-Control-Allow-Origin", "*");
  return next();
});

server.use('/user/*', authorizeRouter);

server.use('/analyze/*', authorizeRouter);

//server.use '/updates/*', authorizeRouter
server.use('/profile/*', authorizeRouter);

server.get('/user/message', function(req, res) {
  var keyword, level, page;
  keyword = req.query.keyword || '';
  level = parseInt(req.query.level) || 0;
  page = parseInt(req.query.page) || 0;
  return user.queryMessage([keyword, level, page]).then(function(result) {
    return res.json(result);
  });
});

server.get('/user/message/count', function(req, res) {
  var keyword, level;
  keyword = req.query.keyword || '';
  level = parseInt(req.query.level) || 0;
  return user.queryMessageCount([keyword, level]).then(function(result) {
    return res.end(result.toString());
  });
});

server.get('/user/vote', function(req, res) {
  return user.getVotes().then(function(votes) {
    return res.json(votes);
  });
});

server.get('/user/vote/:id', function(req, res) {
  return user.getVoteTickets(req.params.id).then(function(tickets) {
    return res.json(tickets);
  });
});

server.post('/user/vote', bodyParser.text(), function(req, res) {
  return user.saveVote(JSON.parse(req.body)).then(function() {
    return res.end('ok');
  });
});

server.post('/user/id', bodyParser.text(), function(req, res) {
  return user.queryUserViaIds(JSON.parse(req.body)).then(function(result) {
    return res.json(result.rows);
  });
});

server.get('/user/:target_username', function(req, res) {
  var target_username;
  target_username = req.params.target_username;
  return user.queryUser(target_username, function(result) {
    return res.json(result);
  });
});

server.get('/user/ip/:target_ip', function(req, res) {
  var target_ip;
  target_ip = req.params.target_ip;
  return user.queryUserViaIp(target_ip, function(result) {
    return res.json(result);
  });
});

server.post('/user/:target_username/dp/:value', function(req, res) {
  var dp, target_username;
  target_username = req.params.target_username;
  dp = parseFloat(req.params.value);
  if (dp === (0/0)) {
    res.statusCode = 400;
    res.end("no dp");
    return;
  }
  return user.setUserDp(target_username, dp, function() {
    return res.end("ok");
  });
});

server.use('/analyze/*', timeRouter);

server.get('/analyze/history', function(req, res) {
  var name, page, type;
  name = req.query.name || '';
  type = req.query.type || '';
  if (type === 'all') {
    type = '';
  }
  page = parseInt(req.query.page) || 1;
  return analytics.queryHistory([name, type, req.start_time, req.end_time, page]).then(function(result) {
    return res.json(result);
  });
});

server.get('/analyze/history/count', function(req, res) {
  var name, type;
  name = req.query.name || '';
  type = req.query.type || '';
  if (type === 'all') {
    type = '';
  }
  return analytics.queryHistoryCount([name, type, req.start_time, req.end_time]).then(function(result) {
    return res.end(result.toString());
  });
});

server.get('/analyze/deck', function(req, res) {
  var name, page, source;
  name = req.query.name || '';
  source = req.query.source || '';
  page = parseInt(req.query.page) || 1;
  return analytics.queryDeck([name, source, req.start_time, req.end_time, page]).then(function(result) {
    return res.json(result);
  });
});

server.get('/analyze/deck/count', function(req, res) {
  var name, source;
  name = req.query.name;
  source = req.query.source;
  return analytics.queryDeckCount([name, source, req.start_time, req.end_time]).then(function(result) {
    return res.end(result.toString());
  });
});

server.get('/analyze/custom', function(req, res) {
  return analytics.runCommands(req.start_time, req.end_time).then(function(result) {
    return res.json(result);
  }).catch(function(err) {
    return console.log(err);
  });
});

server.get('/analyze/custom/commands', function(req, res) {
  return res.sendFile(path.resolve('express-server', 'analytics.json'));
});

textParser = bodyParser.text();

server.post('/analyze/custom/commands', textParser, function(req, res) {
  var commands;
  try {
    commands = JSON.parse(req.body);
  } catch (error) {
    res.statusCode = 400;
    res.end("Not correct json");
  }
  analytics.setCommands(commands);
  return res.end('ok');
});

server.get('/analyze/daily', function(req, res) {
  var type;
  type = req.query.type;
  return analytics.dailyCount(type, req.start_time, req.end_time).then(function(result) {
    return res.json(result);
  }).catch(function(result) {
    res.statusCode = 500;
    return res.end(result);
  });
});

server.get('/updates/package', function(req, res) {
  return packager.pack.then(function() {
    return res.end('ok');
  });
});

server.get('/updates/refresh', function(req, res) {
  return packager.refresh.then(function() {
    return res.end('ok');
  });
});

server.get('/updates/card/:environment/:name', function(req, res) {
  var environment, name;
  environment = req.params.environment;
  name = req.params.name;
  return res.json(update.getCardData(environment, name));
});

server.get('/updates/pull/last', function(req, res) {
  return res.end(update.lastPull.time.toString());
});

server.post('/updates/pull', bodyParser.json(), function(req, res) {
  return update.pullDatabase().then(function(result) {
    return res.end(result.toString());
  }).catch(function(result) {
    res.statusCode = 500;
    return res.end(result.toString());
  });
});

server.post('/updates/push', function(req, res) {
  update.pushDatabase();
  return res.end('ok');
});

server.use('/profile/identifier', function(req, res) {
  var url;
  url = new _url.URL(config.deckIdentifier.host + req.url);
  url.searchParams.set('accessKey', config.deckIdentifier.accessKey);
  url.searchParams.delete('sso');
  url.searchParams.delete('sig');
  try {
    return req.pipe(request(url.toString(), {
      form: req.body
    })).pipe(res);
  } catch (error) {
    return res.end(500);
  }
});

//React Router File12
server.get('*', function(req, res) {
  return res.sendFile(path.resolve('react-pages/build', 'index.html'));
});

server.listen(9999);

//# sourceMappingURL=server.js.map
