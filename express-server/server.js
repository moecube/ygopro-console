// Generated by CoffeeScript 2.0.0-beta3
(function() {
  var analytics, authorizeRouter, bodyParser, express, path, server, textParser, user;

  express = require('express');

  path = require('path');

  bodyParser = require('body-parser');

  user = require('./user');

  analytics = require('./analytics');

  authorizeRouter = require('./author').authorizeRouter;

  server = express();

  server.use(express.static('react-pages/build'));

  server.use('/user/*', authorizeRouter);

  server.use('/analyze/*', authorizeRouter);

  server.get('/user/message', function(req, res) {
    var keyword, level, page;
    keyword = req.query.keyword || '';
    level = req.query.level || 0;
    page = req.query.page || 0;
    return user.queryMessage(keyword, level, page, function(result) {
      return res.json(result);
    });
  });

  server.get('/user/message/count', function(req, res) {
    var keyword, level;
    keyword = req.query.keyword || '';
    level = req.query.level || 0;
    return user.queryMessageCount(keyword, level, function(result) {
      return res.text(result);
    });
  });

  server.get('/user/:target_username', function(req, res) {
    var target_username;
    target_username = req.params.target_username;
    return user.queryUser(target_username, function(result) {
      return res.json(result);
    });
  });

  server.get('/user/ip/:target_ip', function(req, res) {
    var target_ip;
    target_ip = req.params.target_ip;
    return user.queryUserViaIp(target_ip, function(result) {
      return res.json(result);
    });
  });

  server.post('/user/:target_username/dp/:value', function(req, res) {
    var dp, target_username;
    target_username = req.params.target_username;
    dp = parseFloat(req.params.value);
    if (dp === (0/0)) {
      res.statusCode = 400;
      res.end("no dp");
      return;
    }
    return user.setUserDp(target_username, dp, function() {
      return res.end("ok");
    });
  });

  server.get('/analyze/history', function(req, res) {
    var name, page, type;
    name = req.query.name || '';
    type = req.query.type || '';
    page = req.query.page || 0;
    if (!page) {
      page = 1;
    }
    return analytics.queryHistory(name, type, page, function(result) {
      return res.json(result);
    });
  });

  server.get('/analyze/history/count', function(req, res) {
    var name, type;
    name = req.query.name;
    type = req.query.type;
    return analytics.queryHistoryCount(name, type, function(result) {
      return res.end(result.toString());
    });
  });

  server.get('/analyze/deck', function(req, res) {
    var name, page;
    name = req.query.name;
    page = req.query.page;
    if (!page) {
      page = 1;
    }
    return analytics.queryDeck(name, page, function(result) {
      return res.json(result);
    });
  });

  server.get('/analyze/deck/count', function(req, res) {
    var name;
    name = req.query.name;
    return analytics.queryDeckCount(name, function(result) {
      return res.end(result.toString());
    });
  });

  server.get('/analyze/custom', function(req, res) {
    return analytics.runCommands(function(result) {
      return res.json(result);
    });
  });

  server.get('/analyze/custom/commands', function(req, res) {
    return res.sendFile(path.resolve('express-server', 'analytics.json'));
  });

  textParser = bodyParser.text();

  server.post('/analyze/custom/commands', textParser, function(req, res) {
    var commands;
    try {
      commands = JSON.parse(req.body);
    } catch (error) {
      res.statusCode = 400;
      res.end("Not correct json");
    }
    analytics.setCommands(commands);
    return res.end('ok');
  });

  server.get('*', function(req, res) {
    return res.sendFile(path.resolve('react-pages/build', 'index.html'));
  });

  server.listen(9999);

}).call(this);

//# sourceMappingURL=server.js.map
